#!/usr/bin/env python

import argparse
import os.path
import sys

def main():
    parser = argparse.ArgumentParser('Build scripts to run SGE pipeline')
    parser.add_argument('-s', '--samplelist', required=True, help='Path to list of input fastq files')
    parser.add_argument('-o', '--outfile', required=True, help="Path to output file")
    parser.add_argument('-n', '--concurrency', type=int, default=8, help="Number of concurrent jobs")
    parser.add_argument('-f', '--fastqdir', required=False, default="/net/bbi/vol1/data/sge-seq/nobackup/merged/",
                        help="Directory for merged fastq file output. Gene-specific subdirectories will be appended automatically")
    parser.add_argument('-b', '--bamdir', required=False, default="/net/bbi/vol1/data/sge-analysis/nobackup/bam/",
                        help="Directory for BAM output. Gene-specific subdirectories will be appended automatically")
    parser.add_argument('-c', '--countsdir', required=False, default="/net/bbi/vol1/data/sge-analysis/nobackup/counts/",
                        help="Directory for counts output. Gene-specific subdirectories will be appended automatically")
    
    
    parser.add_argument('--verbose', required=False, default=False,
                        action="store_true", help="Turn on verbose output")

    args = parser.parse_args()

    nsamples = 0
    with open(args.samplelist) as infile:
        for line in infile:
            nsamples += 1

    if args.concurrency > 0:
        concurrency = args.concurrency
    else:
        concurrency = 8

    fastqdir = args.fastqdir
    if not fastqdir or not os.path.exists(fastqdir):
        sys.stderr.write("ERROR: please ensure merged fastq output dir %s exists and is writeable\n" % fastqdir)
        sys.exit(-99)
    if fastqdir[-1] == '/': fastqdir = fastqdir[:-1]

    countsdir = args.countsdir
    if not countsdir or not os.path.exists(countsdir):
        sys.stderr.write("ERROR: please ensure counts output dir %s exists and is writeable\n" % countsdir)
        sys.exit(-99)
    if countsdir[-1] == '/': countsdir = countsdir[:-1]

    bamdir = args.bamdir
    if not bamdir or not os.path.exists(bamdir):
        sys.stderr.write("ERROR: please ensure BAM output dir %s exists and is writeable\n" % bamdir)
        sys.exit(-99)
    if bamdir[-1] == '/': bamdir = bamdir[:-1]
    
    
        
    samplelist = args.samplelist
    with open(args.outfile, 'w') as outfile:
        to_write = '''\
#!/bin/bash
#$ -S /bin/bash
#$ -V
#$ -P shendure_bbi
#$ -N sge_pipe
#$ -t 1-{nsamples}
#$ -tc {concurrency}
#$ -e /net/bbi/vol1/data/sge-analysis/work/sge_logs/
#$ -o /net/bbi/vol1/data/sge-analysis/work/sge_logs/

R1FILE=$(awk "NR==$SGE_TASK_ID" {samplelist} | cut -f 4)
R2FILE=$(awk "NR==$SGE_TASK_ID" {samplelist} | cut -f 5)
BASENAME=$(awk "NR==$SGE_TASK_ID" {samplelist} | cut -f 3)
GENENAME=$(awk "NR==$SGE_TASK_ID" {samplelist} | cut -f 1)
EXONNAME=$(awk "NR==$SGE_TASK_ID" {samplelist} | cut -f 2)

ETCDIR=/net/bbi/vol1/data/sge-analysis/etc/${{GENENAME}}
FQDIR={fastqdir}/${{GENENAME}}
BAMDIR={bamdir}/${{GENENAME}}
COUNTSDIR={countsdir}/${{GENENAME}}

# for trimming and merging
OUTMERGED=${{BASENAME}}.merged.fq.gz

# for removing Ns
FQ_NO_N_FILE=${{BASENAME}}.merged.noNs.fq.gz

# for mapping
FAFILE=${{ETCDIR}}/${{GENENAME}}_${{EXONNAME}}.fa
OUTBAM=${{BASENAME}}.bam

source $HOME/.bashrc
conda activate sge

# run seqprep to merge and trim adapters
SeqPrep -f ${{R1FILE}} \\
  -r ${{R2FILE}} \\
  -1 /dev/null \\
  -2 /dev/null \\
  -s ${{FQDIR}}/${{OUTMERGED}} \\
  -A GGTTTGGAGCGAGATTGATAAAGT -B CTGAGCTCTCTCACAGCCATTTAG \\
  -M 0.1 -m 0.001 -q 20 -o 20
                      
# remove Ns
/net/bbi/vol1/data/sge-analysis/bin/removeNs \\
  ${{FQDIR}}/${{OUTMERGED}} \\
  ${{FQDIR}}/${{FQ_NO_N_FILE}}

# mapping
bwa mem ${{FAFILE}} ${{FQDIR}}/${{FQ_NO_N_FILE}} | samtools sort -o ${{BAMDIR}}/${{OUTBAM}} -

# index
samtools index ${{BAMDIR}}/${{OUTBAM}}

# depth
samtools depth -a -H -o ${{COUNTSDIR}}/${{BASENAME}}.depth.tsv ${{BAMDIR}}/${{OUTBAM}}

# counting
/net/bbi/vol1/data/sge-analysis/bin/generateEditCounts \\
  -n ${{GENENAME}}_${{EXONNAME}} \\
  -t ${{ETCDIR}}/targets.tsv \\
  -s ${{COUNTSDIR}}/${{BASENAME}}.snvs.tsv \\
  -d ${{COUNTSDIR}}/${{BASENAME}}.dels.tsv \\
  -S ${{COUNTSDIR}}/${{BASENAME}}.readstats.tsv \\
  -l ${{BASENAME}} \\
  ${{BAMDIR}}/${{OUTBAM}}
    
'''.format(concurrency=concurrency,
           nsamples=nsamples,
           samplelist=samplelist,
           fastqdir=fastqdir,
           bamdir=bamdir,
           countsdir=countsdir)
        outfile.write(to_write)
    return
    

if __name__ == '__main__':
    main()

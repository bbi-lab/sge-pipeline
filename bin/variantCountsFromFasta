#!/usr/bin/env python

import sys
import argparse
from collections import defaultdict

import pysam
import numpy as np
import pandas as pd

sys.path.append("/net/bbi/vol1/data/sge-analysis/lib/")

variant_counts = defaultdict(int)
variant_map = {}


def revcomp(myseq):
    old_chars = "ACGT"
    replace_chars = "TGCA"
    tab = str.maketrans(old_chars,replace_chars)
    return myseq.translate(tab)[::-1]


def processInputFile(args):
    '''process a FASTQ file read by read, identifying reads that match defined sequences exactly

    '''
    matched = 0
    unmatched = 0
    readstats = {'total_reads': 0}
    if args.maxreads < 1:
        maxreads = np.Inf
    else:
        maxreads = args.maxreads

    trim5 = 0
    if args.trim5 > 0:
        trim5 = args.trim5
    trim3 = 0
    if args.trim3 > 0:
        trim3 = args.trim3

    with pysam.FastxFile(args.inputfastq) as infile:
        for record in infile:
            if readstats['total_reads'] >= maxreads:
                break
            readstats['total_reads'] += 1
            localmatched = False
            trimseq = record.sequence
            if trim5 > 0:
                trimseq = trimseq[trim5:]
            if trim3 > 0:
                trimseq = trimseq[:-trim3]
   
            for rseq in variant_counts:
                if rseq == trimseq:
                    if not localmatched:
                        matched += 1
                        localmatched = True
                    variant_counts[rseq] += 1
                    break
            if not localmatched:
                unmatched += 1
    readstats["unmatched"] = unmatched
    readstats["matched"] = matched
    return readstats
        

def writeVariantOutputFile(args, readstats):
    with open(args.output, "w") as outfh:
        outfh.write("sampleid\ttarget\tvariant_id\tsequence\tcount\tvalid_reads\ttotal_reads\n")
        for vseq, vcount in variant_counts.items():
            if args.rc:
                vseq_out = revcomp(vseq)
            else:
                vseq_out = vseq
            outfh.write("%s\t%s\t%s\t%s\t%d\t%d\t%d\n" % (args.sampleid, args.targetname,
                                                          variant_map[vseq],
                                                  vseq_out, vcount, readstats["matched"], 
                                                  readstats["total_reads"]))
    return


def main():
    parser = argparse.ArgumentParser(
        prog='variantCountsFromFasta',
        description='extract edit counts for an SGE sample by string matching against defined variant sequences'
    )
    parser.add_argument('-n', '--targetname', required=True,
                        help="Target name -- e.g., BARD1_X4A")
    parser.add_argument("-o", "--output", required=True, 
                        help="Output file for all variant counts")
    parser.add_argument('-V', "--variants", required=True, 
                        help="FASTA file containing all variant sequences")
    parser.add_argument('-l', '--sampleid', required=True, default="unlabeled",
                        help="Sample identifer (replicate, timepoint) for output file")
    parser.add_argument('-v', '--verbose', required=False, default=False,
                        action="store_true", help="Verbose output")
    parser.add_argument('-5', '--trim5', required=False, default=0, type=int,
                        help="Number of bases to trim from 5' end of each read in FASTQ before comparison (def. 0)")
    parser.add_argument('-3', '--trim3', required=False, default=0, type=int,
                        help="Number of bases to trim from 3' end of each read in FASTQ before comparison (def. 0)")

    parser.add_argument('-r', '--rc', required=False, default=False, action="store_true",
                        help="Reverse complement variant sequences prior to string comparison")
    parser.add_argument('-m', '--maxreads', type=int, default=0, 
                        help='Maximum number of reads to processs')
    parser.add_argument('inputfastq',
                        help="Path to input merged (overlapped reads) FASTQ file")
    args = parser.parse_args()


    with pysam.FastxFile(args.variants) as vfh:
        for record in vfh:
            rname = record.name
            if args.rc:
                rseq = revcomp(record.sequence)
            else:
                rseq = record.sequence
            variant_map[rseq] = rname
            variant_counts[rseq] = 0
    if args.verbose:
        print("INFO: read %d variant sequences from %s" % (len(variant_counts), args.variants))

    readstats = processInputFile(args)
    writeVariantOutputFile(args, readstats)

    return


if __name__ == '__main__':
    main()
    


#!/usr/bin/env python

import argparse
import os
import sys

from contextlib import nullcontext

def main():
    parser = argparse.ArgumentParser('Build scripts to run SGE pipeline for RNA')
    parser.add_argument('-s', '--samplelist', required=True, help='List of input fastq files -- see docs for format')
    parser.add_argument('-o', '--outfile', required=False, help="Path to output file for pipeline script (def. stdout)")
    parser.add_argument('-n', '--concurrency', type=int, default=8, help="Number of concurrent jobs (def. 8)")
    parser.add_argument('-f', '--fastqdir', required=False, default="/net/bbi/vol1/data/sge-seq/nobackup/RNA/merged/",
                        help="Directory for merged fastq file output. Gene-specific subdirectories will be appended automatically")
    parser.add_argument('-b', '--bamdir', required=False, default="/net/bbi/vol1/data/sge-analysis/nobackup/RNA/bam/",
                        help="Directory for BAM output. Gene-specific subdirectories will be appended automatically")
    parser.add_argument('-c', '--countsdir', required=False, default="/net/bbi/vol1/data/sge-analysis/nobackup/RNA/counts/",
                        help="Directory for counts output. Gene-specific subdirectories will be appended automatically")
    
    args = parser.parse_args()

    mygenes = set()
    nsamples = 0
    samplelist = os.path.abspath(args.samplelist)
    with open(samplelist) as infile:
        for line in infile:
            nsamples += 1
            gene = line.split("\t")[0]
            mygenes.add(gene)
            
    if args.concurrency > 0:
        concurrency = args.concurrency
    else:
        concurrency = 8
    if concurrency > 40:
        sys.stderr.write("WARN: You have requested a task concurrency of %d, which may be too high.\n" % concurrency)
        sys.stderr.write("      Consider setting concurrency to 40 or lower\n")

    fastqdir = args.fastqdir
    if fastqdir[-1] == '/': fastqdir = fastqdir[:-1]
    countsdir = args.countsdir
    if countsdir[-1] == '/': countsdir = countsdir[:-1]
    bamdir = args.bamdir
    if bamdir[-1] == '/': bamdir = bamdir[:-1]

    fastqdir = os.path.abspath(fastqdir)
    countsdir = os.path.abspath(countsdir)
    bamdir = os.path.abspath(bamdir)
    
    # create any missing output directories
    for mydir in (fastqdir, countsdir, bamdir):
        if not mydir:
            sys.stderr.write("ERROR: please provide fastq, bam, and counts directories\n" % fastqdir)
            sys.exit(-99)
        if not os.path.isdir(mydir):
            os.makedirs(mydir, exist_ok=True)
            os.chmod(mydir, 0o775)
            sys.stderr.write("INFO: created directory %s\n" % mydir)
            
        for gene in mygenes:
            if not os.path.isdir(os.path.join(mydir, gene)):
                os.mkdir(os.path.join(mydir, gene))
                os.chmod(os.path.join(mydir, gene), 0o775)
                sys.stderr.write("INFO: created directory %s\n" % os.path.join(mydir, gene))


    with open(args.outfile, "w") if args.outfile else nullcontext(sys.stdout) as outfh:
        to_write = '''\
#!/bin/bash
#$ -S /bin/bash
#$ -V
#$ -P shendure_bbi
#$ -N sge_rna_pipe
#$ -t 1-{nsamples}
#$ -l mfree=4G
#$ -l h_rt=2:0:0
#$ -tc {concurrency}
#$ -e /net/bbi/vol1/data/sge-analysis/work/sge_logs/
#$ -o /net/bbi/vol1/data/sge-analysis/work/sge_logs/

R1FILE=$(awk "NR==$SGE_TASK_ID" {samplelist} | cut -f 4)
R2FILE=$(awk "NR==$SGE_TASK_ID" {samplelist} | cut -f 5)
BASENAME=$(awk "NR==$SGE_TASK_ID" {samplelist} | cut -f 3)
GENENAME=$(awk "NR==$SGE_TASK_ID" {samplelist} | cut -f 1)
EXONNAME=$(awk "NR==$SGE_TASK_ID" {samplelist} | cut -f 2)

ETCDIR=/net/bbi/vol1/data/sge-analysis/etc/${{GENENAME}}
FQDIR={fastqdir}/${{GENENAME}}
BAMDIR={bamdir}/${{GENENAME}}
COUNTSDIR={countsdir}/${{GENENAME}}

# for trimming and merging
OUTMERGED=${{BASENAME}}.merged.fq.gz

# for removing Ns
FQ_NO_N_FILE=${{BASENAME}}.merged.noNs.fq.gz

# for mapping
FAFILE=${{ETCDIR}}/${{GENENAME}}_${{EXONNAME}}.fa
OUTBAM=${{BASENAME}}.bam

source $HOME/.bashrc
conda activate sge

# run seqprep to merge and trim adapters
SeqPrep -f ${{R1FILE}} \\
  -r ${{R2FILE}} \\
  -1 /dev/null \\
  -2 /dev/null \\
  -s ${{FQDIR}}/${{OUTMERGED}} \\
  -A GGTTTGGAGCGAGATTGATAAAGT -B CTGAGCTCTCTCACAGCCATTTAG \\
  -M 0.1 -m 0.001 -q 20 -o 20
                      
# remove Ns
/net/bbi/vol1/data/sge-analysis/bin/removeNs \\
  ${{FQDIR}}/${{OUTMERGED}} \\
  ${{FQDIR}}/${{FQ_NO_N_FILE}}

# mapping
bwa mem ${{FAFILE}} ${{FQDIR}}/${{FQ_NO_N_FILE}} | samtools sort -o ${{BAMDIR}}/${{OUTBAM}} -

# index
samtools index ${{BAMDIR}}/${{OUTBAM}}

# find the top cigar string and write it to a file
samtools view ${{BAMDIR}}/${{OUTBAM}} | \\
  cut -f 6 | \\
  head -100000 | \\
  sort | \\
  uniq -c | \\
  sort -n | \\
  tail -1 > ${{BAMDIR}}/${{OUTBAM}}.topcigar.txt

# counting
/net/bbi/vol1/data/sge-analysis/bin/generateRNACounts \\
  -n ${{GENENAME}}_${{EXONNAME}} \\
  -t ${{ETCDIR}}/targets.tsv \\
  -r ${{ETCDIR}}/targets.rna.tsv \\
  -c ${{COUNTSDIR}}/${{BASENAME}}.rnacounts.tsv \\
  -l ${{BASENAME}} \\
  ${{BAMDIR}}/${{OUTBAM}}
    
'''.format(concurrency=concurrency,
           nsamples=nsamples,
           samplelist=samplelist,
           fastqdir=fastqdir,
           bamdir=bamdir,
           countsdir=countsdir)
        outfh.write(to_write)

    if args.outfile:
        sys.stderr.write("Wrote pipeline to %s\n" % args.outfile)
    return
    

if __name__ == '__main__':
    main()

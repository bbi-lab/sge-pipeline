#!/usr/bin/env python

import sys
import os
import argparse
from collections import defaultdict
import altair as alt

sys.path.append("/net/bbi/vol1/data/sge-analysis/lib/")

import sge_util
import sge_counts
import sge_altair
import sge_target

def saveSNVfigure(args, plotdf, figfile):
    a = alt.Chart(plotdf, height=200, width=1000).mark_point(filled=True, size=30).encode(
        x=alt.X('pos_id:N', title="Variant" ,sort='y', axis=alt.Axis(labelFontSize=5)
        ),
        y=alt.Y('count:Q', title="Library count", scale=alt.Scale()),
        color=alt.Color('allele:N', title="Variant allele", scale=alt.Scale(scheme="category10")),
        stroke=alt.Stroke("pam_edit_or_snp:N", title="Fixed edit or SNP", scale=alt.Scale(range=["", "black"]))
        )
    b = alt.Chart(plotdf, height=200, width=1000).mark_point(filled=True, size=50).encode(
        x=alt.X('pos:N', title="Position" ,sort='x', axis=alt.Axis(labelFontSize=10)
        ),
        y=alt.Y('count:Q', title="Library count", scale=alt.Scale()),
        color=alt.Color('allele:N', title="Variant allele"),
        stroke=alt.Stroke("pam_edit_or_snp:N", scale=alt.Scale(range=["", "black"]))
        )
    fullfigure = (a & b).properties(title="SNV Library uniformity for %s" % args.targetname
                    ).configure_title(fontSize=20, 
                    offset=5, 
                    orient='top', 
                    anchor='middle',
        )

    fullfigure.save(figfile, ppi=200)
    return 


def saveDelFigure(args, plotdf, figfile):
    a = alt.Chart(plotdf, height=200, width=1000).mark_point(filled=True, size=30).encode(
        x=alt.X('pos_id:N', title="Variant" ,sort='y', axis=alt.Axis(labelFontSize=5)
        ),
        y=alt.Y('count:Q', title="Library count", scale=alt.Scale()),
        color=alt.Color('pam_edit_or_snp:N', title="Site skipped", scale=alt.Scale(scheme="category10"))
        )
    
    b = alt.Chart(plotdf, height=300, width=1000).mark_rule(size=3).encode(
        x=alt.X('start:Q', title='Deletion coordinates').scale(zero=False),
        x2='end:Q',
        y=alt.Y('count:Q', title='Count in day 0 library').scale(zero=False),
        color=alt.Color('pam_edit_or_snp:N', title="Site skipped", scale=alt.Scale(scheme="category10"))
        )
    
    fullfigure = (a & b).properties(title="Deletion library uniformity for %s" % args.targetname
                    ).configure_title(fontSize=20, 
                    offset=5, 
                    orient='top', 
                    anchor='middle',
        )

    fullfigure.save(figfile, ppi=200)
    return


def main():
    parser = argparse.ArgumentParser(
        prog='qcSGELibrary',
        description='create visualization of library uniformity for SGE target'
    )
    parser.add_argument('-n', '--targetname', required=True,
                        help="Target name -- must match entry in <targetfile>")
    parser.add_argument('-t', '--targetfile', required=False, 
                        help="File containing list of targets and expected edits",
                        default="")
    parser.add_argument('-s', '--snvs', required=False, default="", 
                        help="Input file of SNV counts")
    parser.add_argument('-d', '--dels', required=False, default="", 
                        help="Input file of deletion counts")
    parser.add_argument('-S', '--statsfile', default='', required=True,
                        help="Input file of summary stats")
    parser.add_argument('-o', '--outdir', default='./', required=True,
                        help="Output directory for figures")
    parser.add_argument('-v', '--verbose', required=False, default=False,
                        action="store_true", help="Verbose output")
    args = parser.parse_args()

    if not os.path.exists(args.outdir):
        os.mkdir(args.outdir, mode=0o755)
    if not args.outdir.endswith("/"):
        args.outdir = args.outdir + "/"
    snv_figure_file = args.outdir + "%s.snv_library.png" % args.targetname
    del_figure_file = args.outdir + "%s.del_library.png" % args.targetname

    if not args.targetfile:
        targetfile = sge_util.guess_target_file(args.targetname)
        if not targetfile:
            sys.stderr.write("ERROR: Can't find a target file to use, please specify with -t\n")
            sys.exit(-99)
    else:
        targetfile = args.targetfile

    target = sge_target.Target(args.targetname, targetfile)

    if args.snvs:
        # read the snv counts
        df = sge_counts.getSNVCounts(args.snvs)
 
        # merge with the reference sequence
        df = df.merge(target.refdf, on="pos")
        df = df[df["ref"] != df["allele"]]
        df["pos_id"] = df["pos"].astype(str) + ":" + df["allele"]
        # pivot and annotate with metadata
        df["pam_edit_or_snp"] = False
        df.loc[df["pos"].isin(target.required_edits), "pam_edit_or_snp"] = True
        df.loc[df["pos"].isin(target.skip_pos), "pam_edit_or_snp"] = True

        # make SNV plot
        saveSNVfigure(args, df, snv_figure_file)
        print("INFO: saved SNV library figure to %s" % snv_figure_file)
        n_missing = len(df[(df["pam_edit_or_snp"] == False) &
                       (df["count"] == 0)])
        print("Found %d missing SNVs in library" % n_missing)
        if n_missing > 0:
            print(df[(df["pam_edit_or_snp"] == False) &
                     (df["count"] == 0)][["target", "chrom", "pos_id"]])

    if args.dels:
        df = sge_counts.getDelCounts(args.dels)
        df["pos_id"] = df["start"].astype(str) + "-" + df["end"].astype(str)
        df["middle"] = df["start"] + 1
        df["pam_edit_or_snp"] = False
        df.loc[df["start"].isin(target.required_edits), "pam_edit_or_snp"] = True
        df.loc[df["middle"].isin(target.required_edits), "pam_edit_or_snp"] = True
        df.loc[df["end"].isin(target.required_edits), "pam_edit_or_snp"] = True
        
        # make del plot
        saveDelFigure(args, df, del_figure_file)
        print("INFO: saved deletion library figure to %s" % del_figure_file)
        n_missing = len(df[(df["pam_edit_or_snp"] == False) &
                       (df["count"] == 0)])
        print("Found %d missing deletions in library" % n_missing)
        if n_missing > 0:
            print(df[(df["pam_edit_or_snp"] == False) &
                     (df["count"] == 0)][["target", "chrom", "start", "end"]])

    return 0

if __name__ == '__main__':
    main()
    

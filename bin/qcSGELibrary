#!/usr/bin/env python

import sys
import os
import argparse
from collections import defaultdict
import altair as alt

sys.path.append("/net/bbi/vol1/data/sge-analysis/lib/")

import sge_util
import sge_counts
import sge_altair


def main():
    parser = argparse.ArgumentParser('extract matrix of edits for an SGE sample')
    parser.add_argument('-n', '--targetname', required=True,
                        help="Target name -- must match entry in <targetfile>")
    parser.add_argument('-t', '--targetfile', required=True, 
                        help="File containing list of targets and expected edits")
    parser.add_argument('-s', '--snvs', required=False, default="", 
                        help="Input file of SNV counts")
    parser.add_argument('-d', '--dels', required=False, default="", 
                        help="Input file of deletion counts")
    parser.add_argument('-S', '--statsfile', default='', required=True,
                        help="Input file of summary stats")
    parser.add_argument('-o', '--outdir', default='./', required=True,
                        help="Output directory for figures")
    parser.add_argument('-v', '--verbose', required=False, default=False,
                        action="store_true", help="Verbose output")
    args = parser.parse_args()

    if not os.path.exists(args.outdir):
        os.mkdir(args.outdir, mode=0o755)
    if not args.outdir.endswith("/"):
        args.outdir = args.outdir + "/"
    snv_figure_file = args.outdir + "%s.snv_library.png" % args.targetname
    del_figure_file = args.outdir + "%s.del_library.png" % args.targetname

    # meta data about the target
    chrom, startpos, endpos = sge_util.getTargetEditRegion(args.targetfile, args.targetname)
    refdh = sge_util.getReferenceSequence(chrom, startpos, endpos)
    skip_pos = sge_util.getTargetSkipPositions(args.targetfile, args.targetname)
    req_edits = sge_util.getTargetRequiredEdits(args.targetfile, args.targetname)

    # read the snv counts
    df = sge_counts.getSNVCounts(args.snvs)
    meltdf = df.melt(id_vars=["chrom", "pos", "target", "repl", "day"],
                     value_vars=["A", "C", "G", "T"],
                     var_name="mutant_allele", value_name="count")
    meltdf = meltdf[(meltdf["pos"] >= startpos) &
                      (meltdf["pos"] <= endpos)]
    
    # merge with the reference sequence
    meltdf = meltdf.merge(refdh, on="pos")
    meltdf = meltdf[meltdf["ref"] != meltdf["mutant_allele"]]
    meltdf["pos_id"] = meltdf["pos"].astype(str) + ":" + meltdf["mutant_allele"]
    # pivot and annotate with metadata
    pivotdf = meltdf.pivot(index=["chrom", "pos", "target", "mutant_allele", "ref", "pos_id"],
                           columns=["repl", "day"],
                           values=["count"]
                          ).reset_index()
    pivotdf.columns = pivotdf.columns.to_flat_index().map(
        lambda x: '_'.join([a for a in x if (a!='' and a!="count")])
        )
    pivotdf["pam_edit_or_snp"] = False
    pivotdf.loc[pivotdf["pos"].isin(req_edits), "pam_edit_or_snp"] = True
    pivotdf.loc[pivotdf["pos"].isin(skip_pos), "pam_edit_or_snp"] = True

    # make SNV plot
    plotdf = pivotdf
    a = alt.Chart(plotdf, height=200, width=1000).mark_point(filled=True, size=30).encode(
        x=alt.X('pos_id:N', title="Variant" ,sort='y', axis=alt.Axis(labelFontSize=5)
        ),
        y=alt.Y('lib_D00:Q', title="Library count", scale=alt.Scale()),
        color=alt.Color('mutant_allele:N', title="Variant allele", scale=alt.Scale(scheme="category10")),
        stroke=alt.Stroke("pam_edit_or_snp:N", title="Site skipped", scale=alt.Scale(range=["", "black"]))
        )
    b = alt.Chart(plotdf, height=200, width=1000).mark_point(filled=True, size=50).encode(
    x=alt.X('pos:N', title="Position" ,sort='x', axis=alt.Axis(labelFontSize=10)
        ),
        y=alt.Y('lib_D00:Q', title="library count", scale=alt.Scale()),
        color=alt.Color('mutant_allele:N', title="Variant allele"),
        stroke=alt.Stroke("pam_edit_or_snp:N", scale=alt.Scale(range=["", "black"]))
        )
    fullfigure = (a & b).properties(title="SNV Library uniformity for %s" % args.targetname
                    ).configure_title(fontSize=20, 
                    offset=5, 
                    orient='top', 
                    anchor='middle',
        )

    fullfigure.save(snv_figure_file, ppi=200)
    n_missing = len(plotdf[(plotdf["pam_edit_or_snp"] == False) &
                           (plotdf["lib_D00"] == 0)])
    print("Found %d missing variants in library" % n_missing)
    return 0


if __name__ == '__main__':
    main()
    
